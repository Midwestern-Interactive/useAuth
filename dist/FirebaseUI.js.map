{"version":3,"file":"FirebaseUI.js","sources":["../src/providers/FirebaseUI.ts"],"sourcesContent":["import { Auth0DecodedHash, Auth0UserProfile } from \"auth0-js\";\nimport {\n    AuthOptions,\n    AuthProviderClass,\n    AuthUser,\n    ProviderOptions\n} from \"src/types\";\nimport { auth as FirebaseAuthUI } from \"firebaseui\";\nimport Firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nexport type FirebaseOptions = {\n    signInOptions?: string[];\n};\n\n// Auth Wrapper for Auth0\nexport class FirebaseUI implements AuthProviderClass {\n    private ui: any;\n    private firebase: any;\n    private signInOptions?: string[];\n    private dispatch: (eventName: string, eventData?: any) => void;\n    // Auth0 specific, used for roles\n    private customPropertyNamespace?: string;\n\n    // Initialize the client and save any custom config\n    constructor(params: AuthOptions & FirebaseOptions) {\n        // You will almost always need access to dispatch\n        this.dispatch = params.dispatch;\n\n        this.signInOptions = params.signInOptions;\n        this.firebase = Firebase.initializeApp(\n            {\n                apiKey: \"AIzaSyCdtQ6V3qDxpgDO-usa3zWvBhIJKpAd4mM\",\n                authDomain: \"useauth-demo.firebaseapp.com\",\n                projectId: \"useauth-demo\",\n                storageBucket: \"useauth-demo.appspot.com\",\n                messagingSenderId: \"520315046120\",\n                appId: \"1:520315046120:web:4384141e88f49e638c215d\"\n            },\n            \"useAuth\"\n        );\n\n        // Init your client\n        this.ui = new FirebaseAuthUI.AuthUI(this.firebase.auth());\n\n        // Auth state observer\n        this.firebase.auth().onAuthStateChanged(this.onAuthStateChanged);\n    }\n\n    private onAuthStateChanged(user: Firebase.User) {\n        console.log(\"HAI\", user.toJSON());\n    }\n\n    // Makes configuration easier by guessing default options\n    static addDefaultParams(params: ProviderOptions, callbackDomain: string) {\n        const vals = params as FirebaseOptions;\n        return {\n            signInOptions: [Firebase.auth.EmailAuthProvider.PROVIDER_ID],\n            ...vals\n        };\n    }\n\n    public authorize() {\n        // Open login dialog\n        this.dispatch(\"LOGIN\");\n\n        this.ui.start(\"#firebaseui-auth-container\", {\n            signInOptions: this.signInOptions,\n            signInFlow: \"popup\",\n            callbacks: {\n                signInSuccessWithAuthResult: (authResult: any) => {\n                    console.log({ authResult });\n                    debugger;\n\n                    this.dispatch(\"AUTHENTICATED\", {\n                        user: this.firebase.auth().currentUser.toJSON(),\n                        authResult: {\n                            expiresIn: 3600\n                        }\n                    });\n\n                    return false;\n                }\n            }\n        });\n    }\n\n    public signup() {\n        // Open signup dialog\n    }\n\n    public logout(returnTo?: string) {\n        // Logs user out of the underlying service\n    }\n\n    public userId(user: any): string {\n        // Return the userId from Auth0 shape of data\n        return this.firebase.auth().currentUser?.uid;\n    }\n\n    public userRoles(user: AuthUser): string[] | null {\n        // Return user roles from Auth0 shape of data\n        return [];\n    }\n\n    public async handleLoginCallback(): Promise<boolean> {\n        // Handle login data after redirect back from service\n        // Dispatch ERROR on error\n        // Dispatch AUTHENTICATED on success\n        // include the user object and authResult with at least an expiresIn value\n        return false;\n    }\n\n    public async checkSession(): Promise<{\n        user: AuthUser;\n        authResult: Auth0DecodedHash;\n    }> {\n        // verify session is still valid\n        // return fresh user info\n        const user = this.firebase.auth().currentUser.toJSON();\n\n        console.log(\"checkSession\", user);\n\n        if (user) {\n            return {\n                user,\n                authResult: {\n                    expiresIn: 3600\n                }\n            };\n        } else {\n            throw new Error(\"Session invalid\");\n        }\n    }\n}\n"],"names":["params","this","dispatch","signInOptions","firebase","Firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","ui","FirebaseAuthUI","AuthUI","auth","onAuthStateChanged","user","console","log","toJSON","addDefaultParams","callbackDomain","EmailAuthProvider","PROVIDER_ID","authorize","start","signInFlow","callbacks","signInSuccessWithAuthResult","authResult","_this","currentUser","expiresIn","signup","logout","returnTo","userId","_this$firebase$auth$c","uid","userRoles","handleLoginCallback","checkSession","Error"],"mappings":"+YAyBI,WAAYA,GAERC,KAAKC,SAAWF,EAAOE,SAEvBD,KAAKE,cAAgBH,EAAOG,cAC5BF,KAAKG,SAAWC,UAASC,cACrB,CACIC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,6CAEX,WAIJX,KAAKY,GAAK,IAAIC,OAAeC,OAAOd,KAAKG,SAASY,QAGlDf,KAAKG,SAASY,OAAOC,mBAAmBhB,KAAKgB,oBA9BrD,2BAiCYA,mBAAA,SAAmBC,GACvBC,QAAQC,IAAI,MAAOF,EAAKG,aAIrBC,iBAAP,SAAwBtB,EAAyBuB,GAE7C,UACIpB,cAAe,CAACE,UAASW,KAAKQ,kBAAkBC,cAFvCzB,MAOV0B,UAAA,sBAEHzB,KAAKC,SAAS,SAEdD,KAAKY,GAAGc,MAAM,6BAA8B,CACxCxB,cAAeF,KAAKE,cACpByB,WAAY,QACZC,UAAW,CACPC,4BAA6B,SAACC,GAW1B,OAVAZ,QAAQC,IAAI,CAAEW,WAAAA,IAGdC,EAAK9B,SAAS,gBAAiB,CAC3BgB,KAAMc,EAAK5B,SAASY,OAAOiB,YAAYZ,SACvCU,WAAY,CACRG,UAAW,kBAU5BC,OAAA,eAIAC,OAAA,SAAOC,OAIPC,OAAA,SAAOpB,SAEV,gBAAOjB,KAAKG,SAASY,OAAOiB,oBAArBM,EAAkCC,OAGtCC,UAAA,SAAUvB,GAEb,MAAO,MAGEwB,+BAKT,wBAAO,MAGEC,gCAMHzB,EAAOjB,KAAKG,SAASY,OAAOiB,YAAYZ,SAI9C,GAFAF,QAAQC,IAAI,eAAgBF,GAExBA,EACA,uBAAO,CACHA,KAAAA,EACAa,WAAY,CACRG,UAAW,QAInB,UAAUU,MAAM,mBAnH5B"}