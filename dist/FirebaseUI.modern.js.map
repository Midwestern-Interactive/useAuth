{"version":3,"file":"FirebaseUI.modern.js","sources":["../src/providers/FirebaseUI.ts"],"sourcesContent":["import { Auth0DecodedHash, Auth0UserProfile } from \"auth0-js\";\nimport {\n    AuthOptions,\n    AuthProviderClass,\n    AuthUser,\n    ProviderOptions\n} from \"src/types\";\nimport { auth as FirebaseAuthUI } from \"firebaseui\";\nimport firebase from \"firebase\";\n\n// Auth Wrapper for Auth0\nexport class FirebaseUI implements AuthProviderClass {\n    private ui: any;\n    private dispatch: (eventName: string, eventData?: any) => void;\n    // Auth0 specific, used for roles\n    private customPropertyNamespace?: string;\n    // Initialize the client and save any custom config\n    constructor(params: AuthOptions) {\n        // You will almost always need access to dispatch\n        this.dispatch = params.dispatch;\n\n        // Init your client\n        this.ui = new FirebaseAuthUI.AuthUI(firebase.auth());\n    }\n\n    // Makes configuration easier by guessing default options\n    static addDefaultParams(params: ProviderOptions, callbackDomain: string) {\n        // const vals = params as Auth0Options;\n        return {\n            signInOptions: [firebase.auth.EmailAuthProvider.PROVIDER_ID]\n        };\n    }\n\n    public authorize() {\n        // Open login dialog\n        this.ui.start(\"#firebaseui-auth-container\", {\n            signInOptions: [firebase.auth.EmailAuthProvider.PROVIDER_ID]\n        });\n    }\n    public signup() {\n        // Open signup dialog\n    }\n    public logout(returnTo?: string) {\n        // Logs user out of the underlying service\n    }\n    public userId(user: any): string {\n        // Return the userId from Auth0 shape of data\n        return \"\";\n    }\n    public userRoles(user: AuthUser): string[] | null {\n        // Return user roles from Auth0 shape of data\n        return [];\n    }\n    public async handleLoginCallback(): Promise<boolean> {\n        // Handle login data after redirect back from service\n        // Dispatch ERROR on error\n        // Dispatch AUTHENTICATED on success\n        // include the user object and authResult with at least an expiresIn value\n        return false;\n    }\n\n    public async checkSession(): Promise<{\n        user: AuthUser;\n        authResult: Auth0DecodedHash;\n    }> {\n        // verify session is still valid\n        // return fresh user info\n        return {\n            user: {},\n            authResult: {}\n        };\n    }\n}\n"],"names":["FirebaseUI","constructor","params","this","dispatch","ui","FirebaseAuthUI","AuthUI","firebase","auth","[object Object]","callbackDomain","signInOptions","EmailAuthProvider","PROVIDER_ID","authorize","start","signup","logout","returnTo","userId","user","userRoles","authResult"],"mappings":"gEAWaA,EAMTC,YAAYC,GAERC,KAAKC,SAAWF,EAAOE,SAGvBD,KAAKE,GAAK,IAAIC,EAAeC,OAAOC,EAASC,QAIjDC,wBAAwBR,EAAyBS,GAE7C,MAAO,CACHC,cAAe,CAACJ,EAASC,KAAKI,kBAAkBC,cAIjDC,YAEHZ,KAAKE,GAAGW,MAAM,6BAA8B,CACxCJ,cAAe,CAACJ,EAASC,KAAKI,kBAAkBC,eAGjDG,UAGAC,OAAOC,IAGPC,OAAOC,GAEV,MAAO,GAEJC,UAAUD,GAEb,MAAO,GAEJX,4BAKH,SAGGA,qBAMH,MAAO,CACHW,KAAM,GACNE,WAAY"}