{"version":3,"file":"FirebaseUI.esm.js","sources":["../src/providers/FirebaseUI.ts"],"sourcesContent":["import { Auth0DecodedHash, Auth0UserProfile } from \"auth0-js\";\nimport {\n    AuthOptions,\n    AuthProviderClass,\n    AuthUser,\n    ProviderOptions\n} from \"src/types\";\nimport { auth as FirebaseAuthUI } from \"firebaseui\";\nimport Firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nexport type FirebaseOptions = {\n    signInOptions?: string[];\n    firebaseConfig?: {\n        apiKey: string;\n        authDomain: string;\n        projectId: string;\n        storageBucket: string;\n        messagingSenderId: string;\n        appId: string;\n    };\n    firebaseApp?: Firebase.app.App;\n};\n\nexport type FirebaseUser = Firebase.User;\n\n// Auth Wrapper for Auth0\nexport class FirebaseUI implements AuthProviderClass {\n    private ui: FirebaseAuthUI.AuthUI;\n    private firebase: Firebase.app.App;\n    private signInOptions?: string[];\n    private dispatch: (eventName: string, eventData?: any) => void;\n\n    // Initialize the client and save any custom config\n    constructor(params: AuthOptions & FirebaseOptions) {\n        // You will almost always need access to dispatch\n        this.dispatch = params.dispatch;\n\n        this.signInOptions = params.signInOptions;\n\n        if (params.firebaseConfig) {\n            this.firebase = Firebase.initializeApp(\n                params.firebaseConfig,\n                \"useAuth\"\n            );\n        } else if (params.firebaseApp) {\n            this.firebase = params.firebaseApp;\n        } else {\n            throw \"Please provide firebaseConfig or initialized firebaseApp\";\n        }\n\n        // Init your client\n        this.ui = new FirebaseAuthUI.AuthUI(this.firebase.auth());\n\n        // Auth state observer\n        this.firebase.auth().onAuthStateChanged(this.onAuthStateChanged);\n    }\n\n    private onAuthStateChanged(user: Firebase.User | null) {\n        if (user) {\n            this.dispatch(\"AUTHENTICATED\", {\n                user: this.firebase.auth().currentUser,\n                authResult: {\n                    // needed for useAuth to work\n                    expiresIn: 3600\n                }\n            });\n        }\n    }\n\n    // Makes configuration easier by guessing default options\n    static addDefaultParams(params: ProviderOptions, callbackDomain: string) {\n        const vals = params as FirebaseOptions;\n        return {\n            signInOptions: [Firebase.auth.EmailAuthProvider.PROVIDER_ID],\n            ...vals\n        };\n    }\n\n    public authorize() {\n        // Open login dialog\n        this.dispatch(\"LOGIN\");\n\n        this.ui.start(\"#firebaseui-auth-container\", {\n            signInOptions: this.signInOptions,\n            signInFlow: \"popup\",\n            callbacks: {\n                signInSuccessWithAuthResult: (authResult: any) => {\n                    this.dispatch(\"AUTHENTICATED\", {\n                        user: this.firebase.auth().currentUser,\n                        authResult: {\n                            ...authResult,\n                            // needed for useAuth itself to work\n                            expiresIn: 3600\n                        }\n                    });\n\n                    return false;\n                }\n            }\n        });\n    }\n\n    public signup() {\n        // Open signup dialog\n    }\n\n    public logout(returnTo?: string) {\n        // Logs user out of the underlying service\n        this.firebase.auth().signOut();\n    }\n\n    public userId(user: any): string | undefined {\n        return this.firebase.auth().currentUser?.uid;\n    }\n\n    public userRoles(user: AuthUser): string[] | null {\n        // Return user roles from Auth0 shape of data\n        return [];\n    }\n\n    public async handleLoginCallback(): Promise<boolean> {\n        // Handle login data after redirect back from service\n        // Dispatch ERROR on error\n        // Dispatch AUTHENTICATED on success\n        // include the user object and authResult with at least an expiresIn value\n        return false;\n    }\n\n    public async checkSession(): Promise<{\n        user: AuthUser;\n        authResult: Auth0DecodedHash;\n    }> {\n        // verify session is still valid\n        // return fresh user info\n        const user = this.firebase.auth().currentUser;\n\n        if (user) {\n            // throws if user no longer valid\n            await user.reload();\n\n            return {\n                user,\n                authResult: {\n                    // needed for useAuth to work\n                    expiresIn: 3600\n                }\n            };\n        } else {\n            throw new Error(\"Session invalid\");\n        }\n    }\n}\n"],"names":["FirebaseUI","params","this","dispatch","signInOptions","firebaseConfig","firebase","Firebase","initializeApp","firebaseApp","ui","FirebaseAuthUI","AuthUI","auth","onAuthStateChanged","user","currentUser","authResult","expiresIn","addDefaultParams","callbackDomain","EmailAuthProvider","PROVIDER_ID","authorize","start","signInFlow","callbacks","signInSuccessWithAuthResult","_this","signup","logout","returnTo","signOut","userId","_this$firebase$auth$c","uid","userRoles","handleLoginCallback","checkSession","reload","Error"],"mappings":"mSA2BaA,IAAAA,aAOT,WAAYC,GAMR,GAJAC,KAAKC,SAAWF,EAAOE,SAEvBD,KAAKE,cAAgBH,EAAOG,cAExBH,EAAOI,eACPH,KAAKI,SAAWC,EAASC,cACrBP,EAAOI,eACP,oBAEGJ,EAAOQ,YAGd,KAAM,2DAFNP,KAAKI,SAAWL,EAAOQ,YAM3BP,KAAKQ,GAAK,IAAIC,EAAeC,OAAOV,KAAKI,SAASO,QAGlDX,KAAKI,SAASO,OAAOC,mBAAmBZ,KAAKY,oBA5BrD,2BA+BYA,mBAAA,SAAmBC,GACnBA,GACAb,KAAKC,SAAS,gBAAiB,CAC3BY,KAAMb,KAAKI,SAASO,OAAOG,YAC3BC,WAAY,CAERC,UAAW,WAOpBC,iBAAP,SAAwBlB,EAAyBmB,GAE7C,UACIhB,cAAe,CAACG,EAASM,KAAKQ,kBAAkBC,cAFvCrB,MAOVsB,UAAA,sBAEHrB,KAAKC,SAAS,SAEdD,KAAKQ,GAAGc,MAAM,6BAA8B,CACxCpB,cAAeF,KAAKE,cACpBqB,WAAY,QACZC,UAAW,CACPC,4BAA6B,SAACV,GAU1B,OATAW,EAAKzB,SAAS,gBAAiB,CAC3BY,KAAMa,EAAKtB,SAASO,OAAOG,YAC3BC,gBACOA,GAEHC,UAAW,mBAU5BW,OAAA,eAIAC,OAAA,SAAOC,GAEV7B,KAAKI,SAASO,OAAOmB,aAGlBC,OAAA,SAAOlB,SACV,gBAAOb,KAAKI,SAASO,OAAOG,oBAArBkB,EAAkCC,OAGtCC,UAAA,SAAUrB,GAEb,MAAO,MAGEsB,+BAKT,wBAAO,MAGEC,gCAMHvB,EAAOb,KAAKI,SAASO,OAAOG,YAElC,GAAID,yBAEMA,EAAKwB,0BAEX,MAAO,CACHxB,KAAAA,EACAE,WAAY,CAERC,UAAW,SAInB,UAAUsB,MAAM,mBA1H5B"}